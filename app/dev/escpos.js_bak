
var test = [0x01B, 0x040, 0x01B, 0x045, 0x001];
            test = test.concat("FOO CORP Ltd".toBytes());


console.log("printing data [--");
console.log(data);
console.log("----]");


// var u8 = new Uint8Array().from(data);
    
// var data = new Uint8Array().from(data.toBytes());
// console.log("2 data ",u8);
data1 = UnicodeToWin1251(data);
console.log("2 data ",data1);
var base641 = btoa(String.fromCharCode.apply(null, data1));
// var base641 = bufferToBase64(data1); // "SSDCvSDimaUg8J+SqQ=="
console.log("gek",base641);






console.log("\n\n------------------------------------------------------------------------\n\n");

data = this.template();

//                 var arr = [73, 32, 194, 189, 32, 226, 153, 165, 32, 240, 159, 146, 169];
// var data = new Uint8Array(arr);

data2 = UnicodeToWin1251String(data, 'win1251');
console.log("3 data",data2);
var base64a = btoa(data2);
console.log("luk",base64a);




 console.log("\n\n------------------------------------------------------------------------\n\n");



//                 var arr = [73, 32, 194, 189, 32, 226, 153, 165, 32, 240, 159, 146, 169];
// var data = new Uint8Array(arr);

data = iconvLite.encode(data, 'win1251');
console.log("4 data",data);
var base64 = btoa(String.fromCharCode.apply(null, data));
console.log("chuk",base64);


 console.log("ASSERT TEXT --- ",(base641 == base64 ) + "-" + (base64a == base64));





   data = this.template();
    			console.log("printing data ",data);
                // data = this.iconv(data,"866");

                var d = [0x01B, 0x64, 10].concat("hello world".toBytes());
                console.log("hello data ",d);
                // data = data.toBytes();
                var u = new Uint8Array(data);
                
                
                console.log("1 data ",u);

                var u8 = new Uint8Array([0x01B, 0x64, 10]);
                // var data = new Uint8Array().from(data.toBytes());
                console.log("2 data ",u8);
                // var base64 = window.btoa(data);
                var base64 = btoa(String.fromCharCode.apply(null, u8));


                // var base64 = Base64.encode(data);
                console.log(base64);
    		}, 
            iconv : function(data,codepage){
                return Decode(data);
            }


 var codepage = {
        "cp866": {
            "type": "singlebyte",
            "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№¤■ "
          },
          "windows1251": {
            "type": "_sbcs",
            "chars": "ЂЃ‚ѓ„…†‡€‰Љ‹ЊЌЋЏђ‘’“”•–—�™љ›њќћџ ЎўЈ¤Ґ¦§Ё©Є«¬­®Ї°±Ііґµ¶·ё№є»јЅѕїАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
          }
    };

    var rusAdditional = { 
'А' : 1026, 'Б' : 1027, 'В' : 8218, 'Г' : 1107, 'Д' : 8222, 'Е' : 8230, 'Ё' : 1088, 'Ж' : 8224, 'З' : 8225, 'И' : 8364, 
'Й' : 8240, 'К' : 1033, 'Л' : 8249, 'М' : 1034, 'Н' : 1036, 'О' : 1035, 'П' : 1039, 'Р' : 1106, 'С' : 8216, 'Т' : 8217, 
'У' : 8220, 'Ф' : 8221, 'Х' : 8226, 'Ц' : 8211, 'Ч' : 8212, 'Ш' : 152, 'Щ' : 8482, 'Ъ' : 1113, 'Ы' : 8250, 'Ь' : 1114, 
'Э' : 1116, 'Ю' : 1115, 'Я' : 1119, 'а' : 160, 'б' : 1038, 'в' : 1118, 'г' : 1032, 'д' : 164, 'е' : 1168, 'ё' : 1089, 
'ж' : 166, 'з' : 167, 'и' : 1025, 'й' : 169, 'к' : 1028, 'л' : 171, 'м' : 172, 'н' : 173, 'о' : 174, 'п' : 1031, 
'р' : 1072, 'с' : 1073, 'т' : 1074, 'у' : 1075, 'ф' : 1076, 'х' : 1077, 'ц' : 1078, 'ч' : 1079, 'ш' : 1080, 'щ' : 1081, 
'ъ' : 1082, 'ы' : 1083, 'ь' : 1084, 'э' : 1085, 'ю' : 1086, 'я' : 1087 
   }   
       function Decode(utftext) { 
       var c = c2 = string = ""; 
       var i = 0; 

           while ( i < utftext.length ) { 
               c = utftext.charAt(i); 
               i++; 
               c2 = String.fromCharCode(rusAdditional[c]); 
               if (c2 == ""){c2 = c}; 
               string += c2; 
               //string += "'"+String.fromCharCode(c)+"' : "+ c + "," + '\n'; 
           } 
           return string; 
       }


       <script type="text/javascript">


var DMap = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, 11: 11, 12: 12, 13: 13, 14: 14, 15: 15, 16: 16, 17: 17, 18: 18, 19: 19, 20: 20, 21: 21, 22: 22, 23: 23, 24: 24, 25: 25, 26: 26, 27: 27, 28: 28, 29: 29, 30: 30, 31: 31, 32: 32, 33: 33, 34: 34, 35: 35, 36: 36, 37: 37, 38: 38, 39: 39, 40: 40, 41: 41, 42: 42, 43: 43, 44: 44, 45: 45, 46: 46, 47: 47, 48: 48, 49: 49, 50: 50, 51: 51, 52: 52, 53: 53, 54: 54, 55: 55, 56: 56, 57: 57, 58: 58, 59: 59, 60: 60, 61: 61, 62: 62, 63: 63, 64: 64, 65: 65, 66: 66, 67: 67, 68: 68, 69: 69, 70: 70, 71: 71, 72: 72, 73: 73, 74: 74, 75: 75, 76: 76, 77: 77, 78: 78, 79: 79, 80: 80, 81: 81, 82: 82, 83: 83, 84: 84, 85: 85, 86: 86, 87: 87, 88: 88, 89: 89, 90: 90, 91: 91, 92: 92, 93: 93, 94: 94, 95: 95, 96: 96, 97: 97, 98: 98, 99: 99, 100: 100, 101: 101, 102: 102, 103: 103, 104: 104, 105: 105, 106: 106, 107: 107, 108: 108, 109: 109, 110: 110, 111: 111, 112: 112, 113: 113, 114: 114, 115: 115, 116: 116, 117: 117, 118: 118, 119: 119, 120: 120, 121: 121, 122: 122, 123: 123, 124: 124, 125: 125, 126: 126, 127: 127, 1027: 129, 8225: 135, 1046: 198, 8222: 132, 1047: 199, 1168: 165, 1048: 200, 1113: 154, 1049: 201, 1045: 197, 1050: 202, 1028: 170, 160: 160, 1040: 192, 1051: 203, 164: 164, 166: 166, 167: 167, 169: 169, 171: 171, 172: 172, 173: 173, 174: 174, 1053: 205, 176: 176, 177: 177, 1114: 156, 181: 181, 182: 182, 183: 183, 8221: 148, 187: 187, 1029: 189, 1056: 208, 1057: 209, 1058: 210, 8364: 136, 1112: 188, 1115: 158, 1059: 211, 1060: 212, 1030: 178, 1061: 213, 1062: 214, 1063: 215, 1116: 157, 1064: 216, 1065: 217, 1031: 175, 1066: 218, 1067: 219, 1068: 220, 1069: 221, 1070: 222, 1032: 163, 8226: 149, 1071: 223, 1072: 224, 8482: 153, 1073: 225, 8240: 137, 1118: 162, 1074: 226, 1110: 179, 8230: 133, 1075: 227, 1033: 138, 1076: 228, 1077: 229, 8211: 150, 1078: 230, 1119: 159, 1079: 231, 1042: 194, 1080: 232, 1034: 140, 1025: 168, 1081: 233, 1082: 234, 8212: 151, 1083: 235, 1169: 180, 1084: 236, 1052: 204, 1085: 237, 1035: 142, 1086: 238, 1087: 239, 1088: 240, 1089: 241, 1090: 242, 1036: 141, 1041: 193, 1091: 243, 1092: 244, 8224: 134, 1093: 245, 8470: 185, 1094: 246, 1054: 206, 1095: 247, 1096: 248, 8249: 139, 1097: 249, 1098: 250, 1044: 196, 1099: 251, 1111: 191, 1055: 207, 1100: 252, 1038: 161, 8220: 147, 1101: 253, 8250: 155, 1102: 254, 8216: 145, 1103: 255, 1043: 195, 1105: 184, 1039: 143, 1026: 128, 1106: 144, 8218: 130, 1107: 131, 8217: 146, 1108: 186, 1109: 190} 

 String.prototype.UnicodeToWin1251 = function() { 

    var L = []
    for (var i=0; i<this.length; i++) {
        var ord = this.charCodeAt(i)
        if (!(ord in DMap)){
            console.error("Character "+this.charAt(i)+" isn't supported by win1251!");
            throw "Character "+this.charAt(i)+" isn't supported by win1251!"
        }
        L.push(String.fromCharCode(DMap[ord]))
    }
    // return L.join('')
    return L;
}
    
    



    </script>

        <script type="text/javascript">

       var Base64 = {


    _keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",


    encode: function(input) {
        var output = "";
        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
        var i = 0;

        input = Base64._utf8_encode(input);

        while (i < input.length) {

            chr1 = input.charCodeAt(i++);
            chr2 = input.charCodeAt(i++);
            chr3 = input.charCodeAt(i++);

            enc1 = chr1 >> 2;
            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
            enc4 = chr3 & 63;

            if (isNaN(chr2)) {
                enc3 = enc4 = 64;
            } else if (isNaN(chr3)) {
                enc4 = 64;
            }

            output = output + this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) + this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);

        }

        return output;
    },


    decode: function(input) {
        var output = "";
        var chr1, chr2, chr3;
        var enc1, enc2, enc3, enc4;
        var i = 0;

        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

        while (i < input.length) {

            enc1 = this._keyStr.indexOf(input.charAt(i++));
            enc2 = this._keyStr.indexOf(input.charAt(i++));
            enc3 = this._keyStr.indexOf(input.charAt(i++));
            enc4 = this._keyStr.indexOf(input.charAt(i++));

            chr1 = (enc1 << 2) | (enc2 >> 4);
            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
            chr3 = ((enc3 & 3) << 6) | enc4;

            output = output + String.fromCharCode(chr1);

            if (enc3 != 64) {
                output = output + String.fromCharCode(chr2);
            }
            if (enc4 != 64) {
                output = output + String.fromCharCode(chr3);
            }

        }

        output = Base64._utf8_decode(output);

        return output;

    },

    _utf8_encode: function(string) {
        string = string.replace(/\r\n/g, "\n");
        var utftext = "";

        for (var n = 0; n < string.length; n++) {

            var c = string.charCodeAt(n);

            if (c < 128) {
                utftext += String.fromCharCode(c);
            }
            else if ((c > 127) && (c < 2048)) {
                utftext += String.fromCharCode((c >> 6) | 192);
                utftext += String.fromCharCode((c & 63) | 128);
            }
            else {
                utftext += String.fromCharCode((c >> 12) | 224);
                utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                utftext += String.fromCharCode((c & 63) | 128);
            }

        }

        return utftext;
    },

    _utf8_decode: function(utftext) {
        var string = "";
        var i = 0;
        var c = c1 = c2 = 0;

        while (i < utftext.length) {

            c = utftext.charCodeAt(i);

            if (c < 128) {
                string += String.fromCharCode(c);
                i++;
            }
            else if ((c > 191) && (c < 224)) {
                c2 = utftext.charCodeAt(i + 1);
                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
                i += 2;
            }
            else {
                c2 = utftext.charCodeAt(i + 1);
                c3 = utftext.charCodeAt(i + 2);
                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
                i += 3;
            }

        }

        return string;
    }

}
</script>


        function unicodeStringToTypedArray(s) {
            var escstr = encodeURIComponent(s);
            var binstr = escstr.replace(/%([0-9A-F]{2})/g, function(match, p1) {
                return String.fromCharCode('0x' + p1);
            });
            var ua = new Uint8Array(binstr.length);
            Array.prototype.forEach.call(binstr, function (ch, i) {
                ua[i] = ch.charCodeAt(0);
            });
            return ua;
        }


        String.prototype.toBytes = function() { 
            var arr = [];
            for (var i=0; i < this.length; i++) { 
                arr.push(this[i].charCodeAt(0)) 
            } 
            return arr 
        };




        var DMap = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, 11: 11, 12: 12, 13: 13, 14: 14, 15: 15, 16: 16, 17: 17, 18: 18, 19: 19, 20: 20, 21: 21, 22: 22, 23: 23, 24: 24, 25: 25, 26: 26, 27: 27, 28: 28, 29: 29, 30: 30, 31: 31, 32: 32, 33: 33, 34: 34, 35: 35, 36: 36, 37: 37, 38: 38, 39: 39, 40: 40, 41: 41, 42: 42, 43: 43, 44: 44, 45: 45, 46: 46, 47: 47, 48: 48, 49: 49, 50: 50, 51: 51, 52: 52, 53: 53, 54: 54, 55: 55, 56: 56, 57: 57, 58: 58, 59: 59, 60: 60, 61: 61, 62: 62, 63: 63, 64: 64, 65: 65, 66: 66, 67: 67, 68: 68, 69: 69, 70: 70, 71: 71, 72: 72, 73: 73, 74: 74, 75: 75, 76: 76, 77: 77, 78: 78, 79: 79, 80: 80, 81: 81, 82: 82, 83: 83, 84: 84, 85: 85, 86: 86, 87: 87, 88: 88, 89: 89, 90: 90, 91: 91, 92: 92, 93: 93, 94: 94, 95: 95, 96: 96, 97: 97, 98: 98, 99: 99, 100: 100, 101: 101, 102: 102, 103: 103, 104: 104, 105: 105, 106: 106, 107: 107, 108: 108, 109: 109, 110: 110, 111: 111, 112: 112, 113: 113, 114: 114, 115: 115, 116: 116, 117: 117, 118: 118, 119: 119, 120: 120, 121: 121, 122: 122, 123: 123, 124: 124, 125: 125, 126: 126, 127: 127, 1027: 129, 8225: 135, 1046: 198, 8222: 132, 1047: 199, 1168: 165, 1048: 200, 1113: 154, 1049: 201, 1045: 197, 1050: 202, 1028: 170, 160: 160, 1040: 192, 1051: 203, 164: 164, 166: 166, 167: 167, 169: 169, 171: 171, 172: 172, 173: 173, 174: 174, 1053: 205, 176: 176, 177: 177, 1114: 156, 181: 181, 182: 182, 183: 183, 8221: 148, 187: 187, 1029: 189, 1056: 208, 1057: 209, 1058: 210, 8364: 136, 1112: 188, 1115: 158, 1059: 211, 1060: 212, 1030: 178, 1061: 213, 1062: 214, 1063: 215, 1116: 157, 1064: 216, 1065: 217, 1031: 175, 1066: 218, 1067: 219, 1068: 220, 1069: 221, 1070: 222, 1032: 163, 8226: 149, 1071: 223, 1072: 224, 8482: 153, 1073: 225, 8240: 137, 1118: 162, 1074: 226, 1110: 179, 8230: 133, 1075: 227, 1033: 138, 1076: 228, 1077: 229, 8211: 150, 1078: 230, 1119: 159, 1079: 231, 1042: 194, 1080: 232, 1034: 140, 1025: 168, 1081: 233, 1082: 234, 8212: 151, 1083: 235, 1169: 180, 1084: 236, 1052: 204, 1085: 237, 1035: 142, 1086: 238, 1087: 239, 1088: 240, 1089: 241, 1090: 242, 1036: 141, 1041: 193, 1091: 243, 1092: 244, 8224: 134, 1093: 245, 8470: 185, 1094: 246, 1054: 206, 1095: 247, 1096: 248, 8249: 139, 1097: 249, 1098: 250, 1044: 196, 1099: 251, 1111: 191, 1055: 207, 1100: 252, 1038: 161, 8220: 147, 1101: 253, 8250: 155, 1102: 254, 8216: 145, 1103: 255, 1043: 195, 1105: 184, 1039: 143, 1026: 128, 1106: 144, 8218: 130, 1107: 131, 8217: 146, 1108: 186, 1109: 190}

            function UnicodeToWin1251(s) {
                var binstr = UnicodeToWin1251String(s);
                var ua = new Uint8Array(binstr.length);
                Array.prototype.forEach.call(binstr, function (ch, i) {
                    ua[i] = ch.charCodeAt(0);
                });
                return ua;
            }

            function UnicodeToWin1251String(s) {
                var L = []
                for (var i=0; i<s.length; i++) {
                    var ord = s.charCodeAt(i)
                    if (!(ord in DMap))
                        throw "Character "+s.charAt(i)+" isn't supported by win1251!"
                    L.push(String.fromCharCode(DMap[ord]))
                }
                return L.join('');
            }


/*
            var cp1251 = "ЂЃ‚ѓ„…†‡€‰Љ‹ЊЌЋЏђ‘’“”•–—�™љ›њќћџ ЎўЈ¤Ґ¦§Ё©Є«¬­®Ї°±Ііґµ¶·ё№є»јЅѕїАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя";
            function UnicodeToWin1251Light(s) {

                var L = []
                for (var i=0; i<s.length; i++) {
                    var char = s.charAt(i);
                    if(char.charCodeAt(0) >= 128) {
                        var charPos = cp1251.indexOf(char);
                        if(charPos < 0 ) {
                            console.error( "Character " + char + " isn't supported by win1251!", char);
                            // throw "Character " + char + " isn't supported by win1251!"
                        }
                        console.log( charPos, char);
                        L.push(String.fromCharCode(charPos+128))
                    } else {
                        L.push(char);
                    }
                }
                console.log( L, L.join(''));
                return L.join('');
            }
*/
